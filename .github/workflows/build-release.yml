name: Build and Release Windows Executable

on:
  push:
    tags:
      - 'v*'  # 匹配 v 开头的标签，如 v3.1.6

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if (Test-Path requirements.txt) { pip install -r requirements.txt }
        
    - name: Build with PyInstaller
      run: |
        pyinstaller lalc.spec
        if (-not (Test-Path "dist\lalc.zip")) {
          Write-Error "lalc.zip not found in dist directory!"
          exit 1
        }
        
    - name: Generate Release Notes
      id: release-notes
      run: |
        # 安装 GitHub CLI (如果尚未安装)
        winget install --id GitHub.cli --silent || true
        
        # 获取当前版本号
        $currentVersion = $env:GITHUB_REF -replace 'refs/tags/v', ''
        
        # 获取当前tag的标注信息
        $currentNotes = git tag -l --format='%(contents)' "v$currentVersion"
        
        # 尝试获取上一个Release内容（使用API）
        $headers = @{
          "Authorization" = "token ${{ secrets.LALC_TOKEN }}"
          "Accept" = "application/vnd.github.v3+json"
        }
        
        try {
          $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases" -Headers $headers
          if ($releases.Count -gt 1) {
            $previousRelease = $releases[1].body
          } else {
            $previousRelease = ""
          }
        } catch {
          $previousRelease = ""
        }
        
        # 提取历史记录部分
        $historyContent = if ($previousRelease -match '(?s)<details>.*</details>') {
          $matches[0]
        } else {
          ""
        }
        
        # 构建新Release内容
        $newReleaseContent = @"
        ## V$currentVersion
        $currentNotes
        $historyContent
        "@

        echo "notes<<EOF" >> $env:GITHUB_OUTPUT
        echo "$newReleaseContent" >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.LALC_TOKEN }}
      with:
        files: dist/lalc.zip
        body: |
          ${{ steps.release-notes.outputs.notes }}
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}