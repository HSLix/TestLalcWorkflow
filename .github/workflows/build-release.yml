name: Build and Release Windows Executable

on:
  push:
    tags:
      - 'v*'  # 匹配 v 开头的标签，如 v3.1.7

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if (Test-Path requirements.txt) { pip install -r requirements.txt }

    - name: Build with PyInstaller
      run: |
        pyinstaller lalc.spec
        if (-not (Test-Path "dist\lalc.zip")) {
          Write-Error "lalc.zip not found in dist directory!"
          exit 1
        }

    - name: Generate Release Notes
      id: release-notes
      run: |
        # 获取当前版本号
        $currentVersion = $env:GITHUB_REF -replace 'refs/tags/v', ''

        # 获取当前tag的标注信息
        $currentNotes = git tag -l --format='%(contents)' "v$currentVersion"

        # 固定提示语
        $quarkLink = "- 如果下载出现问题，可以考虑[夸克网盘](https://pan.quark.cn/s/333d6608dddd)"

        # 构建当前版本内容
        $currentReleaseSection = @"
        ## V$currentVersion
        $currentNotes
        "@

        # 使用GitHub API获取上一个Release的body内容
        $headers = @{
          "Authorization" = "token ${{ secrets.LALC_TOKEN }}"
          "Accept" = "application/vnd.github.v3+json"
        }

        try {
          $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases?per_page=1" -Headers $headers

          if ($releases) {
            $previousReleaseBody = $releases[0].body

            # 提取旧的 <details> 内容（如果存在）
            $oldHistory = ""
            if ($previousReleaseBody -match '(?s)<details>.*?</details>') {
              $oldHistory = $matches[0] -replace '<details>\s*<summary>.*?</summary>\s*', '' -replace '</details>', ''
            }

            # 提取上一版本的主要内容（非 <details> 部分）
            $previousMainContent = if ($previousReleaseBody -match '(?s)^[\s\S]*?(?=<details>)') {
              $matches[0]
            } else {
              $previousReleaseBody
            }

            # 构建新的 <details> 内容：上一版本内容 + 原来的历史内容
            $newHistoryContent = @"
            $previousMainContent

            $oldHistory
            "@

            # 清理多余空白行
            $newHistoryContent = $newHistoryContent -replace '\r?\n\s*\r?\n\s*\r?\n', "`n`n"

            # 构建完整的发布说明
            $fullReleaseNotes = @"
            $quarkLink

            $currentReleaseSection

            <details>
            <summary> 历史更新 | History </summary>

            $newHistoryContent
            </details>
            "@
          } else {
            # 没有历史版本时只显示当前内容
            $fullReleaseNotes = @"
            $quarkLink

            $currentReleaseSection
            "@
          }
        } catch {
          Write-Output "无法获取历史发布: $_"
          $fullReleaseNotes = @"
          $quarkLink

          $currentReleaseSection
          "@
        }

        echo "notes<<EOF" >> $env:GITHUB_OUTPUT
        echo "$fullReleaseNotes" >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.LALC_TOKEN }}
      with:
        files: dist/lalc.zip
        body: |
          ${{ steps.release-notes.outputs.notes }}
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}