name: Build and Release Windows Executable

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整提交历史

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if (Test-Path requirements.txt) { pip install -r requirements.txt }
        
    - name: Build with PyInstaller
      run: |
        pyinstaller lalc.spec
        if (-not (Test-Path "dist\lalc.zip")) {
          Write-Error "lalc.zip not found in dist directory!"
          exit 1
        }
        
    - name: Generate Release Notes
      id: release-notes
      run: |
        # 获取当前版本号
        $currentVersion = $env:GITHUB_REF -replace 'refs/tags/v', ''
        
        # 获取当前tag的标注信息（原始格式）
        $currentNotes = git tag -l --format='%(contents)' "v$currentVersion"
        
        # 获取上一个Release的内容
        $previousRelease = gh api repos/${{ github.repository }}/releases/latest --jq '.body' 2>$null || ""
        
        # 提取历史记录部分
        $historyContent = if ($previousRelease -match '(?s)<details>.*</details>') {
          $matches[0]
        } else {
          ""
        }
        
        # 构建新Release内容
        $newReleaseContent = @"
## V$currentVersion
$currentNotes
$historyContent
"@

        echo "notes<<EOF" >> $env:GITHUB_OUTPUT
        echo "$newReleaseContent" >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.LALC_TOKEN }}
      with:
        files: dist/lalc.zip
        body: |
          ${{ steps.release-notes.outputs.notes }}
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}